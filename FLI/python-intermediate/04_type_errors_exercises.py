### üî• TIPOS DE ERRORES EN PYTHON ###

# 1. Genera un SyntaxError al imprimir una cadena sin par√©ntesis.
# ‚Üí Este error ocurre cuando el c√≥digo tiene una sintaxis incorrecta.
#    Por ejemplo: olvidar par√©ntesis, comillas mal cerradas, o signos incorrectos.
# print "error SyntaxError"  # ‚ùå Incorrecto
from math import pi  # ‚úÖ Correcto
import math  # ‚úÖ Correcto
import math
print("correct syntax")  # ‚úÖ Correcto

# ----------------------------------------------------------------------

# 2. Genera un NameError intentando usar una variable no definida.
# ‚Üí Este error aparece cuando se usa una variable o funci√≥n que no ha sido declarada.
variable = "variable"
# print(my_variable)  # ‚ùå 'my_variable' no est√° definida
print(variable)  # ‚úÖ Correcto

# ----------------------------------------------------------------------

# 3. Genera un IndexError accediendo a un √≠ndice inexistente de una lista.
# ‚Üí Ocurre cuando se intenta acceder a una posici√≥n fuera del rango de la lista.
numbers = [1, 2, 3]
# print(numbers[3])  # ‚ùå Los √≠ndices v√°lidos son 0, 1, 2
print(numbers[2])  # ‚úÖ √öltimo elemento

# ----------------------------------------------------------------------

# 4. Genera un ModuleNotFoundError al importar un m√≥dulo inexistente.
# ‚Üí Sucede si el m√≥dulo no existe o est√° mal escrito.
# import mathhh  # ‚ùå El m√≥dulo correcto es 'math'

# ----------------------------------------------------------------------

# 5. Genera un AttributeError accediendo a un atributo que no existe.
# ‚Üí Aparece cuando intentas acceder a una propiedad o m√©todo inexistente en un m√≥dulo u objeto.
# print(math.SQRT)  # ‚ùå No existe 'SQRT' en el m√≥dulo math
print(math.sqrt(9))  # ‚úÖ La funci√≥n correcta es sqrt()

# ----------------------------------------------------------------------

# 6. Genera un KeyError al acceder a una clave inexistente de un diccionario.
# ‚Üí Ocurre cuando la clave buscada no est√° en el diccionario.
my_dict = {"name": "cris", "age": 27}
# print(my_dict["alias"])  # ‚ùå No existe la clave "alias"
print(my_dict["name"])  # ‚úÖ Correcto

# ----------------------------------------------------------------------

# 7. Genera un TypeError usando tipos incorrectos (por ejemplo, √≠ndice string en lista).
# ‚Üí Se produce cuando se usa un tipo de dato no v√°lido en una operaci√≥n.
my_list = ["my", 13, "list"]
# print(my_list["first"])  # ‚ùå El √≠ndice debe ser un n√∫mero entero
print(my_list[0])  # ‚úÖ Correcto

# ----------------------------------------------------------------------

# 8. Genera un ImportError al importar una funci√≥n que no existe desde un m√≥dulo.
# ‚Üí Este error ocurre cuando se intenta importar algo que no est√° definido en el m√≥dulo.
# from math import my_pi  # ‚ùå 'my_pi' no existe en math

# ----------------------------------------------------------------------

# 9. Genera un ValueError intentando convertir un string no num√©rico a entero.
# ‚Üí El tipo de dato es correcto (string), pero su contenido no es v√°lido para la conversi√≥n.
# print(int("uno"))  # ‚ùå 'uno' no puede convertirse en int
print(int("10"))  # ‚úÖ Correcto

# ----------------------------------------------------------------------

# 10. Intenta detectar si un error ocurre usando try-except con un KeyError.
# ‚Üí Los bloques try-except permiten capturar errores sin detener la ejecuci√≥n del programa.

my_dict = {"name": "cris", "age": 27}

try:
    print(my_dict["alias"])  # ‚ùå Esta clave no existe
except KeyError:
    # ‚úÖ Captura el error
    print("KeyError detected: the key 'alias' does not exist")

# El programa no se detiene y contin√∫a su ejecuci√≥n
print("Program finished correctly")
