# =========================================================
# üìò SETS EN PYTHON - EJERCICIOS PR√ÅCTICOS EXPLICADOS
# =========================================================

# Un set (conjunto) es una colecci√≥n **no ordenada**, **sin elementos duplicados**
# y cuyos valores son **mutables** (pueden a√±adirse o eliminarse).
# Se usa con {} o con set().

# 1. Crea un set con los n√∫meros del 1 al 5 e impr√≠melo.
my_set = {1, 2, 3, 4, 5}
print(my_set)
print(type(my_set))  # <class 'set'>

# 2. A√±ade el n√∫mero 6 al set {1, 2, 3, 4, 5} e impr√≠melo.
my_set.add(6)
print(my_set)  # ahora incluye el 6

# 3. Intenta a√±adir el n√∫mero 5 al set nuevamente. ¬øQu√© sucede?
my_set.add(5)
print(my_set)
# No pasa nada, porque los sets no permiten duplicados.

# 4. Verifica si el n√∫mero 3 est√° en el set e imprime el resultado.
print(3 in my_set)  # True
# Tambi√©n podr√≠amos comprobar un valor que no exista.
print(9 in my_set)  # False

# 5. Elimina el n√∫mero 4 del set e imprime el set resultante.
my_set.remove(4)
print(my_set)
# Si intentas eliminar un elemento que no existe, da error.
# Para evitarlo, se puede usar discard(): my_set.discard(4)

# 6. Usa el m√©todo clear() para vaciar un set y luego imprime su longitud.
my_set.clear()
print(len(my_set))  # 0, el set queda vac√≠o pero sigue existiendo

# 7. Convierte el set {"manzana", "naranja", "pl√°tano"} en una lista
# e imprime el primer elemento de la lista.
my_set = {"manzana", "naranja", "pl√°tano"}
my_list = list(my_set)
# ‚ö†Ô∏è El orden de un set no est√° garantizado, as√≠ que el primer elemento
# puede variar cada vez que ejecutes el programa.
print(my_list[0])

# 8. Realiza la uni√≥n de dos sets: {1, 2, 3} y {4, 5, 6}, e imprime el resultado.
my_set = {1, 2, 3}
my_other_set = {4, 5, 6}
my_full_set = my_set.union(my_other_set)
print(my_full_set)
# El m√©todo union() combina los elementos de ambos sets sin repetirlos.

# 9. Calcula la diferencia entre los sets {1, 2, 3, 4} y {3, 4, 5, 6}
# e imprime el resultado.
my_set = {1, 2, 3, 4}
my_other_set = {3, 4, 5, 6}
difference = my_set.difference(my_other_set)
print(difference)  # {1, 2} ‚Üí los elementos que est√°n solo en my_set

# 10. Elimina un set llamado my_set usando del y luego intenta imprimirlo
# para ver el resultado.
del my_set
# print(my_set)  # ‚ùå NameError: name 'my_set' is not defined
# del elimina completamente la variable de la memoria.
