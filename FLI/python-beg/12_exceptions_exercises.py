import math

# 1. Crea una funci√≥n que intente dividir dos n√∫meros proporcionados por el usuario.
# Usa try-except para capturar cualquier error de divisi√≥n (por ejemplo, divisi√≥n por cero).

try:
    # Pedimos los n√∫meros dentro del try para poder capturar errores de conversi√≥n
    n1 = int(input("numero1: "))
    n2 = int(input("numero2: "))

    # Intentamos dividir
    result = n1 / n2
    print(f"El resultado es: {result}")

# Si el usuario introduce texto en vez de n√∫mero ‚Üí ValueError
except ValueError as e:
    print(f"Error: debes escribir solo n√∫meros. {e}")

# Si el usuario intenta dividir entre cero ‚Üí ZeroDivisionError
except ZeroDivisionError as e:
    print(f"Error: no se puede dividir entre cero. {e}")

# Captura de cualquier otro error inesperado
except Exception as e:
    print(f"Ocurri√≥ un error inesperado: {e}")

# Este bloque se ejecuta siempre, ocurra o no error
finally:
    print("Fin del programa.")

# 2. Crea una funci√≥n que tome una cadena e intente convertirla en un n√∫mero entero.
# Usa try-except para capturar cualquier error en la conversi√≥n.

try:
    user_str = input("Escribe una cadena: ")
    user_int = int(user_str)
    print(f"El n√∫mero convertido es: {user_int}")
except ValueError:
    print("Error: la cadena introducida no es un n√∫mero entero v√°lido.")
finally:
    print("Conversi√≥n finalizada.")


# 3. Crea una funci√≥n que abra un archivo, lea su contenido y maneje posibles errores (por ejemplo,
# archivo no encontrado). Usa try-except para gestionar las operaciones de archivos de forma segura.


# Conceptos importantes:
# - Al abrir archivos en Python, se pueden generar errores como:
#   -> FileNotFoundError: cuando el archivo no existe.
#   -> PermissionError: cuando no tenemos permisos para leerlo.
#   -> Exception: cualquier otro error inesperado.
# - Por eso, usamos bloques try-except-finally para manejarlo de forma segura.

def read_file(file_name):
    """Intenta abrir y leer un archivo. Muestra un mensaje de error si algo falla."""
    try:
        # Intentamos abrir el archivo en modo lectura ('r')
        with open(file_name, "r") as file:
            content = file.read()
            print("Contenido del archivo:\n")
            print(content)

    except FileNotFoundError:
        print("‚ùå Error: El archivo no existe. Verifica el nombre o la ruta.")

    except PermissionError:
        print("‚ö†Ô∏è Error: No tienes permisos para leer este archivo.")

    except Exception as e:
        # Captura cualquier otro tipo de error
        print(f"‚ö†Ô∏è Ocurri√≥ un error inesperado: {e}")

    finally:
        # Este bloque se ejecuta siempre, haya o no error
        print("\nüìÅ Operaci√≥n de lectura finalizada.")


# Si el archivo existe, lo leer√° correctamente.
# Si no existe, mostrar√° un mensaje de error manejado.
read_file("example.txt")

# 4. Crea una funci√≥n que realice m√∫ltiples operaciones (suma, resta, divisi√≥n, multiplicaci√≥n)
# con dos n√∫meros. Usa try-except-else-finally para manejar errores y asegurar que se imprima un mensaje
# final, independientemente de los errores.


def calculator(n1, n2):
    try:
        print(f"sum: {n1 + n2}")
        print(f"rest: {n1 - n2}")
        print(f"division: {n1 / n2}")
        print(f"multiply: {n1 * n2}")
    except ZeroDivisionError as e:
        print(f"Error: no se puede dividir entre cero. {e}")
    except Exception as e:
        print(f"Error inesperado: {e}")
    else:
        print("Las operaciones se realizaron correctamente.")
    finally:
        print("end")


calculator(10, 2)
calculator(10, 0)

# 5. Crea una funci√≥n que le pida al usuario su edad y lance un ValueError si la entrada no es
# un n√∫mero entero positivo. Usa el manejo de excepciones para gestionar la entrada y lanzar excepciones
# personalizadas cuando sea necesario.


def get_age(age):
    if age < 0:
        raise ValueError("age must be over 0")
    else:
        print(f"valid age, {age}")


try:
    user_input = input("what's your age?: ")
    age = int(user_input)
    get_age(age)
except ValueError as e:
    if "invalid literal" in str(e):
        print("Error: you must enter a valid number.")
    else:
        print(e)


# 6. Crea una funci√≥n que intente acceder a un elemento de una lista por √≠ndice.
# Usa try-except para manejar el caso donde el √≠ndice est√© fuera de rango.

def get_index(index, elements):
    try:
        print(elements[index])
    except IndexError as e:
        print(f"Error: {e}")


my_list = [35, 24]
get_index(4, my_list)


# 7. Crea una funci√≥n que use try-except para manejar m√∫ltiples excepciones: ZeroDivisionError,
# ValueError y TypeError.
def test_errors(a, b, mode):
    """
    Funci√≥n que fuerza distintos errores seg√∫n el modo:
    - "zero" -> ZeroDivisionError
    - "value" -> ValueError
    - "type" -> TypeError
    - cualquier otro -> operaci√≥n normal a / b
    """
    try:
        if mode == "zero":
            result = a / 0
        elif mode == "value":
            result = int("hola")
        elif mode == "type":
            result = a / "texto"
        else:
            result = a / b
    except (ZeroDivisionError, ValueError, TypeError) as e:
        if isinstance(e, ZeroDivisionError):
            print(f"ZeroDivisionError capturado: {e}")
        elif isinstance(e, ValueError):
            print(f"ValueError capturado: {e}")
        elif isinstance(e, TypeError):
            print(f"TypeError capturado: {e}")
    else:
        print(f"Resultado: {result}")
        return result
    finally:
        print("Fin de la funci√≥n\n")


# Pruebas
test_errors(10, 2, "zero")
test_errors(10, 2, "value")
test_errors(10, 2, "type")
test_errors(10, 2, "normal")

# 8. Crea una funci√≥n que simule una transacci√≥n. Lanza una excepci√≥n personalizada llamada
# InsufficientFundsError si el saldo es menor que la cantidad a retirar.


# Creamos una nueva clase de excepci√≥n que hereda de Exception
# Esto nos permite lanzar errores espec√≠ficos para nuestro caso
class InsufficientFundsError(Exception):
    """Excepci√≥n personalizada para saldos insuficientes"""
    pass  # 'pass' porque no necesitamos a√±adir nada m√°s, solo la definimos

# Funci√≥n que simula una transacci√≥n bancaria


def transaction(amount, balance):
    """
    Intenta retirar 'amount' del saldo 'balance'.
    Si el saldo no es suficiente, lanza la excepci√≥n InsufficientFundsError.
    """
    if (balance - amount) < 0:
        # Si el saldo final ser√≠a negativo, lanzamos la excepci√≥n personalizada
        raise InsufficientFundsError("balance cannot be negative")
    else:
        # Si hay suficiente saldo, realizamos la transacci√≥n
        print(f"transaction done, new balance: {balance - amount}")


# Bloque try-except para manejar la excepci√≥n personalizada
try:
    # Intentamos una transacci√≥n con saldo suficiente ‚Üí no se lanza excepci√≥n
    transaction(500, 1500)

    # Intentamos una transacci√≥n con saldo insuficiente ‚Üí se lanza la excepci√≥n
    transaction(5000, 1500)

# Capturamos espec√≠ficamente nuestra excepci√≥n personalizada
except InsufficientFundsError as e:
    # Imprimimos un mensaje indicando que ocurri√≥ un error controlado
    print(f"personalized exception: {e}")

# 9. Crea una funci√≥n que intente convertir una lista de cadenas en enteros.
# Maneja cualquier error que surja cuando una cadena no pueda convertirse.
# Excepci√≥n personalizada para indicar que hubo un error al convertir un string a int


class ListToIntError(Exception):
    """Excepci√≥n personalizada para errores de conversi√≥n de lista"""
    pass

# Funci√≥n que intenta convertir cada elemento de una lista de strings a entero


def str_list_to_int(str_list):
    converted_list = []  # Lista donde guardaremos los enteros convertidos

    for i, item in enumerate(str_list):
        try:
            # Intentamos convertir cada string a entero
            number = int(item)
            converted_list.append(number)
        except ValueError as e:
            # Si no se puede convertir, lanzamos nuestra excepci√≥n personalizada
            raise ListToIntError(
                f"Elemento no convertible en √≠ndice {i}: '{item}'") from e

    # Si todo va bien, retornamos la lista convertida
    return converted_list


# Ejemplo de uso
my_list = ["10", "20", "hola", "40"]

try:
    result = str_list_to_int(my_list)
    print(result)
except ListToIntError as e:
    print(f"Personalized exception: {e}")

    print(f"personalized exception: {e}")

# 10. Crea una funci√≥n que calcule la ra√≠z cuadrada de un n√∫mero. Lanza un ValueError si el n√∫mero
# es negativo.


# Funci√≥n que calcula la ra√≠z cuadrada de un n√∫mero
def sqrt_number(number):
    # Lanzamos un ValueError si el n√∫mero es negativo
    if number < 0:
        raise ValueError(
            "No se puede calcular la ra√≠z cuadrada de un n√∫mero negativo")

    # Si el n√∫mero es v√°lido, calculamos la ra√≠z cuadrada
    result = math.sqrt(number)
    return result


# Bloque de prueba con manejo de excepciones
try:
    print(sqrt_number(-10))  # Intentamos calcular la ra√≠z de un n√∫mero negativo
except ValueError as e:
    # Capturamos la excepci√≥n y mostramos un mensaje amigable
    print(f"Error: {e}")

# Tambi√©n podemos probar con un n√∫mero positivo
try:
    print(sqrt_number(16))  # Esto devuelve 4.0
except ValueError as e:
    print(f"Error: {e}")
