// üìò M√âTODOS DEL DOM
// El DOM (Document Object Model) representa la estructura de un documento HTML
// como un √°rbol de nodos, que podemos manipular con JavaScript.

// üß© SELECCI√ìN DE ELEMENTOS
// Para modificar o leer contenido HTML desde JS, primero debemos ‚Äúseleccionar‚Äù los elementos.

// -------------------------------------------------------------
// üß± M√âTODOS B√ÅSICOS (anteriores a querySelector)
// -------------------------------------------------------------

// ‚úÖ getElementById(id)
// Devuelve un √∫nico elemento que tenga el id especificado.
// Si no existe, devuelve null.
const myElementById = document.getElementById("id")

// ‚úÖ getElementsByClassName(class)
// Devuelve una colecci√≥n *viva* (HTMLCollection) de todos los elementos
// que tengan esa clase. Si el DOM cambia, esta colecci√≥n se actualiza sola.
const myElementsClass = document.getElementsByClassName("class")

// ‚úÖ getElementsByTagName(tag)
// Devuelve todos los elementos con esa etiqueta (p. ej. "div", "p", "img", etc.)
// Tambi√©n devuelve una HTMLCollection (colecci√≥n viva).
const myElementsTag = document.getElementsByTagName("tag")

// -------------------------------------------------------------
// üß≠ M√âTODOS MODERNOS (m√°s flexibles y potentes)
// -------------------------------------------------------------

// ‚úÖ querySelector(selector)
// Devuelve el PRIMER elemento que coincida con el selector CSS indicado.
// (por ejemplo: una clase ".paragraph", un id "#header", o una etiqueta "p")
const myElementFirstParagraph = document.querySelector(".paragraph")

// ‚úÖ querySelectorAll(selector)
// Devuelve *todos* los elementos que coincidan con el selector CSS indicado.
// Devuelve una NodeList (NO viva ‚Üí no se actualiza si el DOM cambia).
const myElements = document.querySelectorAll(".paragraph")

// -------------------------------------------------------------
// üí° DIFERENCIAS IMPORTANTES
// -------------------------------------------------------------
// - getElementById ‚Üí siempre un solo elemento (m√°s r√°pido)
// - getElementsByClassName / TagName ‚Üí colecci√≥n viva (antiguo)
// - querySelector / querySelectorAll ‚Üí m√°s modernos, aceptan cualquier selector CSS
// - querySelectorAll ‚Üí devuelve NodeList, √∫til con forEach()

// üìò MANIPULACI√ìN DE ELEMENTOS DEL DOM
// Una vez que seleccionamos un elemento del DOM, podemos cambiar su contenido,
// sus atributos, estilos, clases, o incluso crear/eliminar nodos.

// -------------------------------------------------------------
// üìù CAMBIAR EL CONTENIDO DE UN ELEMENTO
// -------------------------------------------------------------

// ‚úÖ textContent
// Cambia o devuelve el texto interno de un elemento.
// ‚ùóNo interpreta etiquetas HTML ‚Üí las muestra como texto literal.
const title = document.getElementById("title")
title.textContent = "Hola JavaScript"
// Ejemplo: <h1 id="title">Hola JavaScript</h1>

// -------------------------------------------------------------
// ‚úÖ innerHTML
// Cambia o devuelve el contenido HTML interno de un elemento.
// ‚ùóS√≠ interpreta etiquetas HTML, es decir, puede insertar otras etiquetas dentro.
// ‚ö†Ô∏è Cuidado: si se usa con contenido din√°mico o externo, puede provocar fallos de seguridad (XSS).
const container = document.querySelector(".container")
container.innerHTML = "<p>Nuevo p√°rrafo</p>"
// Ejemplo: <div class="container"><p>Nuevo p√°rrafo</p></div>

// -------------------------------------------------------------
// üí° DIFERENCIAS ENTRE textContent e innerHTML
// -------------------------------------------------------------
// - textContent: m√°s seguro y r√°pido, s√≥lo texto (no renderiza etiquetas).
// - innerHTML: m√°s flexible, permite insertar etiquetas HTML.

// Ejemplo de diferencia:
const div = document.querySelector(".example")

div.textContent = "<strong>Hola</strong> mundo"
// Resultado visible: <strong>Hola</strong> mundo (no renderiza <strong>)

div.innerHTML = "<strong>Hola</strong> mundo"
// Resultado visible: Hola (en negrita) mundo

// -------------------------------------------------------------
// ‚úÖ insertAdjacentHTML(posici√≥n, html)
// Inserta HTML en una posici√≥n espec√≠fica sin reemplazar el contenido existente.
// Muy √∫til cuando no quieres borrar el contenido anterior del elemento.
container.insertAdjacentHTML("beforeend", "<p>Segundo p√°rrafo</p>")

// Posiciones posibles:
// - "beforebegin": antes del elemento actual
// - "afterbegin": dentro, al inicio
// - "beforeend": dentro, al final
// - "afterend": despu√©s del elemento actual


// üìò MODIFICACI√ìN DE ATRIBUTOS DEL DOM
// Los atributos son las propiedades que se definen directamente en las etiquetas HTML.
// Ejemplo: <a href="https://google.com" target="_blank">Google</a>

// -------------------------------------------------------------
// ‚úÖ 1. OBTENER UN ATRIBUTO EXISTENTE
// -------------------------------------------------------------
// getAttribute("nombreDelAtributo")
// Devuelve el valor actual del atributo indicado.

const firstLink = document.querySelector("a")
const firstUrl = firstLink.getAttribute("href")

console.log("La URL original es:", firstUrl)
// Ejemplo: si el enlace es <a href="https://google.com"> ‚Üí devuelve "https://google.com"

// -------------------------------------------------------------
// ‚úÖ 2. ESTABLECER O MODIFICAR UN ATRIBUTO
// -------------------------------------------------------------
// setAttribute("nombreDelAtributo", "nuevoValor")
// Si el atributo no existe, lo crea; si ya existe, lo actualiza.

firstLink.setAttribute("href", "https://example.com")
console.log("Nuevo enlace:", firstLink.getAttribute("href"))
// Ahora el enlace apunta a https://example.com

// Tambi√©n puedes crear atributos nuevos:
firstLink.setAttribute("title", "Visita el sitio ejemplo")
// ‚Üí ahora el enlace tiene un atributo title visible al pasar el rat√≥n

// -------------------------------------------------------------
// ‚úÖ 3. COMPROBAR SI UN ELEMENTO TIENE UN ATRIBUTO
// -------------------------------------------------------------
// hasAttribute("nombreDelAtributo")
// Devuelve true o false seg√∫n el atributo exista o no.

const hasTarget = firstLink.hasAttribute("target")
console.log("¬øEl enlace tiene atributo target?", hasTarget)
// Ejemplo: <a href="..." target="_blank"> ‚Üí devuelve true
// Ejemplo: <a href="..."> ‚Üí devuelve false

// -------------------------------------------------------------
// ‚úÖ 4. ELIMINAR UN ATRIBUTO
// -------------------------------------------------------------
// removeAttribute("nombreDelAtributo")
// Elimina un atributo completamente del elemento.

firstLink.removeAttribute("title")
// Ahora ya no tiene el atributo "title" que hab√≠amos a√±adido

// -------------------------------------------------------------
// üí° RESUMEN DE M√âTODOS
// -------------------------------------------------------------
// getAttribute()    ‚Üí obtiene el valor de un atributo
// setAttribute()    ‚Üí establece o crea un atributo
// hasAttribute()    ‚Üí comprueba si existe un atributo
// removeAttribute() ‚Üí elimina un atributo


// üé® INTERACCI√ìN CON CLASES Y ESTILOS CSS
// El DOM nos permite modificar tanto las clases de un elemento (para aplicar estilos CSS),
// como sus estilos inline directamente desde JavaScript.

// -------------------------------------------------------------
// ‚úÖ 1. MANIPULAR CLASES CON classList
// -------------------------------------------------------------
// La propiedad .classList devuelve un objeto con todos los nombres de clase del elemento.
// Adem√°s, permite usar m√©todos para a√±adir, eliminar o alternar clases din√°micamente.

const box = document.querySelector(".box")

// ‚ûï Agregar una clase
box.classList.add("selected")
// Ahora el elemento tendr√° la clase "selected" ‚Üí <div class="box selected"></div>

// ‚ûñ Eliminar una clase
box.classList.remove("selected")
// Elimina la clase "selected" si existe ‚Üí <div class="box"></div>

// üîÅ Alternar (a√±adir si no la tiene, eliminar si ya la tiene)
box.classList.toggle("selected")
// Ideal para efectos de clic o animaciones ‚Üí alterna el estado cada vez que se ejecuta

// ‚ö° Puedes comprobar si un elemento tiene una clase:
console.log(box.classList.contains("selected")) // true o false


// -------------------------------------------------------------
// ‚úÖ 2. APLICAR ESTILOS DIRECTAMENTE CON style
// -------------------------------------------------------------
// Cada propiedad CSS se puede modificar directamente desde el objeto `style`.
// OJO: las propiedades se escriben en formato camelCase (sin guiones).

const button = document.querySelector("button")

button.style.backgroundColor = "blue"
button.style.color = "white"
button.style.padding = "10px"

// Esto equivale a escribir en CSS:
// button {
//   background-color: blue;
//   color: white;
//   padding: 10px;
// }

// ‚ö†Ô∏è Nota importante:
// Los estilos aplicados desde JavaScript tienen prioridad sobre los del CSS externo
// (porque son inline, es decir, escritos directamente en el HTML).

// -------------------------------------------------------------
// üí° RESUMEN DE M√âTODOS √öTILES
// -------------------------------------------------------------
// üî∏ classList.add("nombreClase")       ‚Üí A√±ade una clase
// üî∏ classList.remove("nombreClase")    ‚Üí Elimina una clase
// üî∏ classList.toggle("nombreClase")    ‚Üí Alterna una clase
// üî∏ classList.contains("nombreClase")  ‚Üí Devuelve true/false si la clase existe
// üî∏ element.style.propiedadCSS         ‚Üí Modifica un estilo inline


// üß± CREACI√ìN Y ELIMINACI√ìN DE ELEMENTOS EN EL DOM

// -------------------------------------------------------------
// ‚úÖ 1. CREAR ELEMENTOS NUEVOS
// -------------------------------------------------------------
// Se usa document.createElement("etiqueta") para crear un nuevo nodo HTML en memoria.
// A√∫n no aparece en la p√°gina hasta que lo insertamos en el DOM.

const container = document.querySelector(".container")

const newParagraph = document.createElement("p") // crea <p></p>

// üí¨ Importante: textContent es una propiedad, no una funci√≥n
newParagraph.textContent = "nuevo p√°rrafo creado desde JS"

// Podemos a√±adir estilos directamente:
newParagraph.style.padding = "8px"
newParagraph.style.backgroundColor = "#eee"

// Finalmente, lo insertamos en el DOM (al final del contenedor)
container.appendChild(newParagraph)


// -------------------------------------------------------------
// ‚úÖ 2. INSERTAR ELEMENTOS EN POSICIONES ESPEC√çFICAS
// -------------------------------------------------------------
const itemsList = document.querySelector("ul")

const newItem = document.createElement("li")
newItem.textContent = "nuevo elemento"

// Opci√≥n 1Ô∏è‚É£ - Insertar antes de un hijo existente
const secondItem = itemsList.children[1] // seleccionamos el segundo <li>
itemsList.insertBefore(newItem, secondItem)
// Resultado: el nuevo <li> se coloca justo antes del segundo elemento

// ‚ö†Ô∏è Si intentas usar append(), prepend(), before() o after() con el mismo nodo,
// se *mover√°* de lugar (no se duplica). Cada elemento solo puede estar una vez en el DOM.

// Opci√≥n 2Ô∏è‚É£ - Insertar al final de la lista
itemsList.append(newItem)

// Opci√≥n 3Ô∏è‚É£ - Insertar al principio
itemsList.prepend(newItem)

// Opci√≥n 4Ô∏è‚É£ - Insertar justo antes o despu√©s de un nodo concreto
secondItem.before(newItem)
secondItem.after(newItem)


// -------------------------------------------------------------
// üóëÔ∏è 3. ELIMINAR ELEMENTOS DEL DOM
// -------------------------------------------------------------

// ‚úÖ Forma moderna y sencilla:
newParagraph.remove()
// ‚Üí Elimina directamente el nodo del DOM

// ‚úÖ Forma tradicional (anterior a ES6):
// 1. Se busca el elemento padre
// 2. Se elimina el hijo desde el padre

const parent = container
parent.removeChild(newParagraph)


// -------------------------------------------------------------
// üí° RESUMEN DE M√âTODOS
// -------------------------------------------------------------
// üî∏ document.createElement("tag") ‚Üí Crea un nodo HTML
// üî∏ element.textContent = "texto" ‚Üí A√±ade texto al elemento
// üî∏ parent.appendChild(element) ‚Üí Inserta el hijo al final del padre
// üî∏ parent.insertBefore(newNode, referenceNode) ‚Üí Inserta antes de un hijo concreto
// üî∏ element.append() / prepend() ‚Üí A√±ade hijos al final o principio
// üî∏ element.before() / after() ‚Üí Inserta antes o despu√©s de un nodo
// üî∏ element.remove() ‚Üí Elimina directamente el nodo
// üî∏ parent.removeChild(child) ‚Üí Forma cl√°sica de eliminar un hijo


//----------------------------
// EVENTOS Y ELEMENTOS DEL DOM
//----------------------------

// 1Ô∏è‚É£ Definir una funci√≥n que se ejecutar√° cuando ocurra un evento
// En este caso, la funci√≥n se ejecuta al hacer clic en un bot√≥n
function showMsg() {
    alert("click!")
}

// 2Ô∏è‚É£ Seleccionar el bot√≥n mediante su id
const sendButton = document.querySelector("#send")

// 3Ô∏è‚É£ Asociar un evento al bot√≥n con addEventListener
// El primer par√°metro es el tipo de evento ("click")
// El segundo es la funci√≥n que se ejecutar√° cuando ocurra
sendButton.addEventListener("click", showMsg)

// Tambi√©n podemos usar funciones flecha directamente
sendButton.addEventListener("click", () => {
    alert("click con una arrow function")
})


//--------------------------------------
// EVENTO "DOMContentLoaded"
//--------------------------------------
// Este evento se dispara cuando TODO el contenido HTML ha sido cargado
// (antes de que se carguen im√°genes, CSS, etc.)
// Es √∫til para asegurarse de que el DOM est√° listo antes de manipularlo
document.addEventListener("DOMContentLoaded", () => {
    console.log("el dom est√° completamente cargado")
})


//--------------------------------------
// EVENTOS DE RAT√ìN (mouseenter / mouseleave)
//--------------------------------------
// "mouseenter": cuando el cursor entra en el elemento
// "mouseleave": cuando el cursor sale del elemento
sendButton.addEventListener("mouseenter", () => {
    sendButton.style.backgroundColor = "green"
})

sendButton.addEventListener("mouseleave", () => {
    sendButton.style.backgroundColor = "blue"
})


//--------------------------------------
// EVENTOS DE FORMULARIO
//--------------------------------------

// 1Ô∏è‚É£ Seleccionar el formulario
const form = document.querySelector("form")

// 2Ô∏è‚É£ Escuchar el evento "submit"
// Este evento ocurre cuando se env√≠a el formulario (por bot√≥n o Enter)
form.addEventListener("submit", (event) => {
    // Por defecto, el formulario recarga la p√°gina al enviarse.
    // Si queremos evitarlo:
    event.preventDefault()

    // Aqu√≠ podr√≠amos escribir c√≥digo para procesar los datos del formulario
    console.log("form submitted!")
})
