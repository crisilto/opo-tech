// üß™ TESTING EN DESARROLLO DE SOFTWARE

// üîπ ¬øQu√© es el testing?
// El "testing" o prueba de software es el proceso de comprobar que el c√≥digo
// funciona correctamente, cumple los requisitos esperados y no contiene errores.
// Se basa en ejecutar funciones o componentes con distintos valores y verificar
// que el resultado sea el correcto.

// üîπ ¬øPor qu√© es importante?
// 1. Aumenta la calidad del software: detecta errores antes de llegar al usuario.
// 2. Facilita el mantenimiento: si cambias c√≥digo, las pruebas te dicen si rompiste algo.
// 3. Permite refactorizar con confianza.
// 4. Ahorra tiempo y dinero a largo plazo (detectar errores en producci√≥n es m√°s costoso).
// 5. Es esencial en entornos profesionales donde varios desarrolladores trabajan en el mismo proyecto.

// -----------------------------------------------------------
// ‚öôÔ∏è TIPOS DE PRUEBAS EN DESARROLLO PROFESIONAL
// -----------------------------------------------------------

// 1Ô∏è‚É£ PRUEBAS UNITARIAS (Unit Tests)
// - Comprueban el comportamiento de una sola funci√≥n, clase o componente en aislamiento.
// - Son las m√°s r√°pidas y numerosas.
// - Ejemplo: verificar que una funci√≥n "sumar(2,3)" devuelva 5.
function sumar(a, b) {
    return a + b
}
module.exports = sumar
// prueba unitaria manual
console.log(sumar(2, 3) === 5) // true ‚Üí test pasa
console.log(sumar(2, -1) === 1) // true ‚Üí test pasa

// 2Ô∏è‚É£ PRUEBAS DE INTEGRACI√ìN (Integration Tests)
// - Comprueban c√≥mo interact√∫an varias partes del sistema entre s√≠.
// - Ejemplo: si una funci√≥n depende de otra, o un m√≥dulo usa una API interna.
function obtenerUsuario() {
    return { nombre: "Cris", edad: 27 }
}
function saludarUsuario() {
    const usuario = obtenerUsuario()
    return `Hola ${usuario.nombre}`
}
// prueba de integraci√≥n: comprueba que ambas funciones trabajen bien juntas
console.log(saludarUsuario() === "Hola Cris") // true ‚Üí test pasa

// 3Ô∏è‚É£ PRUEBAS E2E (End to End)
// - Simulan la experiencia real del usuario final.
// - Se ejecutan normalmente en el navegador con herramientas como Cypress o Playwright.
// - Comprueban todo el flujo: desde abrir la p√°gina hasta realizar acciones y ver el resultado.
// - Ejemplo: ‚Äúel usuario inicia sesi√≥n y ve su panel‚Äù.

// Estas pruebas son m√°s lentas y complejas, pero aseguran que la app funciona de principio a fin.
// En un entorno real no se hacen a mano, sino con automatizaci√≥n.

// -----------------------------------------------------------
// üí° Resumen r√°pido:
// Unitarias ‚Üí peque√±as piezas
// Integraci√≥n ‚Üí piezas conectadas
// E2E ‚Üí flujo completo del usuario
// -----------------------------------------------------------