// ==================================
// TEOR√çA: M√ìDULOS EN ECMAScript 6 (ES6)
// ==================================

// En JavaScript moderno, podemos dividir nuestro c√≥digo en m√≥dulos.
// Esto permite separar l√≥gica en archivos distintos y reutilizarla.

//----------------------------------------------------------
// üì§ 1. EXPORTACIONES
//----------------------------------------------------------

// ‚û§ Exportaci√≥n por NOMBRE (named export):
// Podemos exportar varias cosas desde un archivo, cada una con su nombre.

export const PI = 3.14;

export function sumar(a, b) {
    return a + b;
}

export class Persona {
    constructor(nombre) {
        this.nombre = nombre;
    }
}

// ‚û§ Exportaci√≥n por DEFECTO (default export):
// Solo puede haber UNA exportaci√≥n por defecto por archivo.

export default function saludar(nombre) {
    console.log(`Hola, ${nombre}`);
}

//----------------------------------------------------------
// üì• 2. IMPORTACIONES
//----------------------------------------------------------

// ‚û§ Importar por nombre:

// ‚û§ Importar todo en un objeto:
// utils.sumar(2, 3)

// ‚û§ Importar por defecto:

// ‚û§ Mezclar ambas:

// Nota: en el navegador, estos archivos deben tener extensi√≥n `.js` y usarse con `type="module"`
// Ejemplo en HTML:
// <script type="module" src="main.js"></script>

//----------------------------------------------------------
// üóÇÔ∏è 3. ORGANIZACI√ìN MODULAR DEL C√ìDIGO
//----------------------------------------------------------

// Buenas pr√°cticas:
// - Usa archivos separados por funcionalidad (ej: math.js, ui.js, user.js)
// - Evita que un m√≥dulo tenga muchas responsabilidades
// - Evita depender de variables globales
// - Nombra los archivos y exportaciones de forma clara

// Ejemplo de estructura modular:
// - src/
//    - main.js
//    - utils/
//        - math.js
//        - fechas.js
//    - componentes/
//        - header.js
//        - footer.js

// Esto permite:
// - Reutilizar c√≥digo
// - Facilitar pruebas
// - Mejorar la legibilidad y el mantenimiento

//----------------------------------------------------------
// üì¶ 4. INTRODUCCI√ìN A BUNDLERS MODERNOS (VITE, WEBPACK)
//----------------------------------------------------------

// Los navegadores no entienden todav√≠a todo el sistema de m√≥dulos de forma eficiente para producci√≥n.
// Los bundlers (empaquetadores) como Vite o Webpack:
// - Toman todos tus m√≥dulos
// - Los combinan en uno (o varios) archivos optimizados
// - Transpilan c√≥digo moderno si es necesario (por ejemplo con Babel)

// ‚û§ Vite:
// - Muy r√°pido, ideal para proyectos con React o Vue
// - Usa ESModules por defecto y hot-reload
// - Configuraci√≥n m√≠nima

// ‚û§ Webpack:
// - Muy flexible y potente
// - Ideal para configuraciones personalizadas y proyectos grandes
// - Requiere m√°s configuraci√≥n

// Ambos permiten:
// - Minificar el c√≥digo
// - Usar archivos `.js`, `.ts`, `.jsx`, `.scss`, etc.
// - Optimizar recursos (im√°genes, fuentes, estilos)

// Para empezar con Vite:
// npm create vite@latest
// cd tu-proyecto
// npm install
// npm run dev