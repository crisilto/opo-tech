// ========================================
// EJERCICIOS: FORMULARIOS Y EVENTOS EN REACT
// ========================================

//----------------------------------------------------------
// üß† Manejo de formularios con estado
//----------------------------------------------------------

// üß© 1. Crea un formulario con un input de nombre.
//    - Usa `useState` para controlar el valor
//    - Al enviar, muestra un alert con el nombre ingresado

// üß© 2. A√±ade un input de email y muestra ambos valores al enviar el formulario.

//----------------------------------------------------------
// ‚úçÔ∏è Inputs controlados
//----------------------------------------------------------

// üß© 3. Crea un formulario con m√∫ltiples campos (`nombre`, `apellido`, `edad`).
//    - Usa un solo estado con un objeto para guardar todos los valores

// üß© 4. Muestra los datos actualizados en tiempo real debajo del formulario mientras el usuario escribe.

// üß© 5. BONUS: Crea un bot√≥n "Resetear" que limpie todos los inputs (setForm a valores vac√≠os).

//----------------------------------------------------------
// üì¶ Formularios anidados y din√°micos
//----------------------------------------------------------

// üß© 6. Crea un formulario con campos anidados para direcci√≥n:
//    - `calle`, `ciudad`, `c√≥digo postal`
//    - Usa un objeto `direccion` dentro del estado

// üß© 7. Crea un input din√°mico de "tel√©fonos" (array de strings):
//    - Bot√≥n "Agregar tel√©fono" ‚Üí a√±ade un input nuevo
//    - Cada input se guarda en un array de tel√©fonos en el estado

// üß© 8. A√±ade un bot√≥n "Eliminar" al lado de cada input de tel√©fono para quitarlo del array

// üß© 9. BONUS: Al enviar el formulario, muestra todos los valores del estado (nombre, direcci√≥n, tel√©fonos)

//----------------------------------------------------------
// üîÅ Validaciones opcionales
//----------------------------------------------------------

// üß© 10. BONUS: Valida que todos los campos est√©n llenos antes de enviar el formulario.
//    - Si falta alguno, muestra un mensaje de error y no env√≠es
//    - Si todo est√° bien, muestra los datos por consola

// üß© 11. BONUS: Marca en rojo los inputs que est√©n vac√≠os (usa clases condicionales con errores)